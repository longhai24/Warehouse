package com.accp.Test.dao;

import java.lang.reflect.Field;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.accp.Test.annotation.Column;
import com.accp.Test.annotation.Table;
@SuppressWarnings("all")
public class CommonDao extends BaseDao{
	
	//查询所有
	public <T> List<T> queryAllColumn(Class<T> cls) {
		ResultSet rs = null;
		List<T> data;
		String tblName = null;
		try {
			// 1.从类的元注解中获得表名
			if (cls.isAnnotationPresent(Table.class)) {
				// 获得指定元注解
				Table tbl = cls.getDeclaredAnnotation(Table.class);
				tblName = tbl.value();
			}
			rs = super.Select("select * from " + tblName);
			data = new ArrayList<T>();
			// 2.从字段的元注解中获得列名
			while (rs.next()) {
				// 1.获得构造方法,并且实例化
				Object obj = cls.newInstance();
				// 2.获得属性，并且赋值
				for (Field f : cls.getDeclaredFields()) {
					if (f.isAnnotationPresent(Column.class)) {
						Column column = f.getDeclaredAnnotation(Column.class);
						f.setAccessible(true);
						f.set(obj, rs.getObject(column.name()));
					}
				}
				data.add((T) obj);
			}
			return data;
		} catch (Exception ex) {
			throw new RuntimeException(ex);
		} finally {
			try {
				rs.close();
			} catch (SQLException ex) {
				throw new RuntimeException(ex);
			}
		}
	}
	//新增
	public int save(Object obj) {
		String sql = "insert into %s(%s) values(%s)";
		String tblName = null;
		StringBuffer clName = new StringBuffer();
		StringBuffer clValue = new StringBuffer();
		try {
			Class cls = obj.getClass();
			// 1.从类的元注解中获得表名
			if (cls.isAnnotationPresent(Table.class)) {
				// 获得指定元注解
				Table tbl = (Table) cls.getDeclaredAnnotation(Table.class);
				tblName = tbl.value();
			}
			for (Field f : cls.getDeclaredFields()) {
				f.setAccessible(true);
				if (f.isAnnotationPresent(Column.class)) {
					Column col = f.getDeclaredAnnotation(Column.class);
					if (!col.isIdentity()) {
						clName.append(col.name()).append(",");// 列名
						if (col.type().equals("varchar")) {
							clValue.append("'").append(f.get(obj)).append("',");
						} else {
							clValue.append(f.get(obj)).append(",");
						} // 列值
					}
				}
			}
			// 移除最后一个逗号
			clName.replace(clName.length() - 1, clName.length(), "");
			clValue.replace(clValue.length() - 1, clValue.length(), "");
			sql = String.format(sql, tblName, clName.toString(), clValue.toString());
			return super.Update(sql);
		} catch (Exception ex) {
			throw new RuntimeException(ex);
		}
	}
	
	
	//删除
	public int delete(Class cls,Map<String, Object> map) {
		String tabName=null;
		if(cls.isAnnotationPresent(Table.class)) {
			Table tab=(Table) cls.getDeclaredAnnotation(Table.class);
			tabName=tab.value();
		}
		String sql="delete from "+tabName+" where 1=1";
		if(map!=null) {
			Iterator iter = map.entrySet().iterator();
				while (iter.hasNext()) {
					Map.Entry entry = (Map.Entry) iter.next();
					Object key = entry.getKey();
					Object val = entry.getValue();
					sql+=" and "+key+"='"+val+"'";
				}
		}
		System.out.println("删除的sql"+sql);
		return super.Update(sql);
	}
}
